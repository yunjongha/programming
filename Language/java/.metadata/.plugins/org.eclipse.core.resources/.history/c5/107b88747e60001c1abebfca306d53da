package chapter0_general;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ForEach {

	
	
	private static Collection<Suit> suits = Arrays.asList(Suit.values());
	private static Collection<Rank> ranks = Arrays.asList(Rank.values());
	
	public static void main(String[] args) {
		Card card = new Card();
		for (Iterator<Suit> i = suits.iterator(); i.hasNext(); ) {
				Suit suit = i.next();
			for (Iterator<Rank> j = ranks.iterator(); j.hasNext(); )
				card.add(suit, j.next());
		}
	}
}

enum Suit { CLUB, DIAMON, HEART, SPADE }

enum Rank { ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING }

/**
 * 
 * @author yunjo
 *
 */
final class Card {

	private final Map<Suit, Set<Rank>> cards = new HashMap<>();
	
	private final Lock lock = new ReentrantLock();
	private final Condition cond = lock.newCondition();
	
	public void add(Suit suit, Rank rank) {
		
		lock.lock();
		try {
			Set<Rank> ranks = cards.get(suit);
			if(ranks == null) {
				ranks = new HashSet<>();
			}
			//cond.await();
			ranks.add(rank);
			cards.put(suit, ranks);
		//} catch (InterruptedException e) {
			
		} finally {
			lock.unlock();
		}
	}
	
	/**
	 * 
	 * @return
	 */
	public void showCard() {
		for(Iterator<Suit> it = cards.keySet().iterator(); it.hasNext(); ) {
			Suit suit = it.next();
			Set<Rank> ranks = cards.get(suit);
			System.out.print("suit: " + suit);
			ranks.forEach( x -> System.out.print(", rank: " + x);
		}
	}
}
