package chapter2_stream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

public class StatefulTransform {

	private static final String[] words = new String[] {"chanbin", "dohyeon", "jongha", "chamnu", 
			"joo", "jis", "good", "jood", "good"}; 
	
	public static void main(String[] args) {
		//distinct();
		//sort();
		//max();
		find();
	}
	
	public static void distinct() {
		Stream<String> uniqueWords = Stream.of(words).distinct();
		uniqueWords.forEach(System.out::println);
	}
	
	public static void sort() {
		Stream<String> shortest = Stream.of(words).sorted(Comparator.comparing(String::length));
		shortest.forEach(System.out::println);

		Stream<String> longest = Stream.of(words).sorted(Comparator.comparing(String::length).reversed());
		longest.forEach(System.out::println);
	}
	
	public static void max() {
		Optional<String> largest = Stream.of(words).max(String::compareToIgnoreCase);
		Optional<String> largest1 = Stream.of(words).max((x,y) -> x.compareToIgnoreCase(y));
		if (largest.isPresent()) {
			System.out.println("largets: " + largest.get());
		}
	}
	
	public static void find() {
		Optional<String> startsJ = Stream.of(words).parallel().filter(x -> x.startsWith("j")).findFirst();
		if(startsJ.isPresent()) {
			System.out.println("find first: " + startsJ.get());
			System.out.println("find : " + startsJ);
		}

		Optional<String> startsPJ = Stream.of(words).parallel().filter(x -> x.startsWith("j")).findAny();
		
		startsPJ.orElseGet(() -> System.getProperty("user.dir"));
		
		List<String> results = new ArrayList<>();
		startsPJ.ifPresent(System.out::println);
		startsPJ.ifPresent(results::add);
		
		if(startsPJ.isPresent()) {
			System.out.println("find any: " + startsPJ.get());
			System.out.println("find : " + startsPJ);
		}
		
		StringT aT = new StringT();
		StringT[] aTArray = new StringT[] { new StringT(), new StringT() };
		boolean matched = Stream.of(words).parallel().anyMatch(aT::startsWith);
		boolean matched2 = Stream.of(words).parallel().anyMatch(x -> x.startsWith("j"));

		if(startsPJ.isPresent()) {
			System.out.println("find any: " + startsPJ.get());
			System.out.println("find : " + startsPJ);
		}
	}
}

final class StringT {
	
	public boolean startsWith(String param) {
		return true;
	}
	
	public boolean startsWithA() {
		return true;
	}
	
	
}
